[1] Git 설치 
[2] GUI vs CLI
    (1) GUI와 CLI의 정의
         1. GUI (Graphic User Interface) : 그래픽을 통해 사용자와 컴퓨터가 상호 작용하는 방식
         2. CLI (Command Line Interface) : 터미널을 통해 사용자와 컴퓨터가 상호 작용하는 방식
    (2) CLI를 사용하는 이유
         1. GUI를 사용하는 경우 (4단계) : 마우스 우클릭 → 새로 만들기 → 폴더 → new 작성
         2. CLI를 사용하는 경우 (1단계) : mkdir new

         Windows에는 CLI 환경인 `Powershell`과 `명령 프롬프트`가 이미 존재합니다.

하지만 왜 Git Bash라는 것을 사용할까요?
1.명령어의 통일을 위해서 입니다.
    - UNIX 계열 운영체제의 명령어와 Windows의 명령어의 차이가 존재합니다.
    - 따라서 `Git Bash`라고 하는 일종의 번역기를 통해 Windows에서도 UNIX 계열 운영체제의 터미널 명령어를 사용하기 위함입니다.
2. UNIX 계열 운영체제의 명령어를 더 많이 쓰기 때문입니다.
    - 개발자 입장에서는 Windows보다는 UNIX 계열 운영체제 기반의 프로그램이 훨씬 많습니다.
    - 그만큼 개발 시장에서는 UNIX 계열 운영체제가 더 많이 사용되기 때문에, `Git Bash`를 통해서 UNIX 계열 운영체제의 터미널 명령어를 연습합니다.

[3] 경로
    (1) 루트, 홈 디렉토리
        1.루트 디렉토리 (Root Directory, /)
        2.홈 디렉토리 (Home Directory, ~)
    (2) 절대 경로와 상대 경로
        1.절대 경로 : C:/Users/kyle/Desktop
        2.상대 경로 : kyle/Desktop ==>현제 C:/Users라면
        3.(./) : 현재 작업하고 있는 폴더를 의미합니다.
        4.(../) : 현재 작업하고 있는 폴더의 부모 폴더를 의미합니다.

[4] 터미널 명령어
    1. touch : 파일을 생성하는 명령어
               숨김 파일을 만들기 위해서는 .을 파일 명 앞에 붙입니다.
               EX) $ touch text.txt
    2. MKDIR : make directory
               EX) $ mkdir folder // mkdir 'happy hacking'
    3. LS    : list segments
               옵션) -a: all 옵션. 숨김 파일까지 모두 보여줍니다.
                     -l: long 옵션. 용량, 수정 날짜 등 파일 정보를 자세히 보여줍니다.
               EX) ls // ls -a // ls -a -l // ls -al
    4. mv    : move
               EX) $ mv text.txt folder // $ mv text1.txt text2.txt

    5. cd    : hange directory
               cd ~ 를 입력하면 홈 디렉토리로 이동합니다. (단순히 cd 라고만 입력해도 동일합니다.)
               cd .. 를 입력하면 부모 디렉토리로 이동합니다. (위로 가기)
               cd - 를 입력하면 바로 전 디렉토리로 이동합니다. (뒤로 가기)
               EX) $ cd folder  // $ cd C:/Users/kyle/Desktop  // $ cd ../parent/child

    6. rm    : remove
               GUI와 달리 휴지통으로 이동하지 않고, 바로 완전 삭제합니다.
               *(asterisk, wildcard)를 사용해서 rm *.txt 라고 입력하면 txt 파일 전체를 다 지웁니다.
               -r : recursive 옵션. 폴더를 지울 때 사용합니다.
               EX) $ rm test.txt // $ rm -r folder
    7. start, open : Windows에서는 start를, Mac에서는 open을 사용할 수 있습니다.
    8. 유용한 단축키
               1. 위, 아래 방향키 : 과거에 작성했던 명령어 조회
               2. tab : 폴더/파일 이름 자동 완성
               3. ctrl + a : 커서가 맨 앞으로 이동
               4. ctrl + e : 커서가 맨 뒤로 이동
               5. ctrl + w : 커서가 앞 단어를 삭제
               6. ctrl + l : 터미널 화면을 깨끗하게 청소 (스크롤 올리면 과거 내역 조회 가능)
               7. ctrl + insert : 복사
               8. shift + insert : 붙여넣기